- name: infrastructure setup
  hosts: localhost
  gather_facts: no
  vars:
    target_aws_region: eu-west-1
    win_initial_password: myTempPassword123!
  tasks:
  - name: Get the local IP
    local_action:
      module: uri
      url: http://checkip.amazonaws.com/
      return_content: yes
    register: ip_lookup 
  - set_fact:
      external_ip: "{{ ip_lookup.content | regex_replace('\n','') }}/32"
  - name: find current Windows AMI in this region
    ec2_ami_find:
      region: "{{ target_aws_region }}"
      platform: windows
      virtualization_type: hvm
      owner: amazon
      name: Windows_Server-2012-R2_RTM-English-64Bit-Base-*
      no_result_action: fail
      sort: name
      sort_order: descending
    register: found_amis
  - set_fact:
      win_ami_id: "{{ (found_amis.results | first).ami_id  }}"
  - name: ensure security group is present
    ec2_group:
      name: WinRM RDP
      description: Inbound WinRM and RDP
      region: "{{ target_aws_region }}"
      rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 5986
        to_port: 5986
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 5432
        to_port: 5432
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3389
        to_port: 3389
        cidr_ip: 0.0.0.0/0
      rules_egress:
      - proto: -1
        cidr_ip: 0.0.0.0/0
    register: sg_out
  - name: ensure instances are running
    ec2:
      region: "{{ target_aws_region }}"
      image: "{{ win_ami_id }}"
      instance_type: t2.micro
      group_id: [ "{{ sg_out.group_id }}" ]
      wait: yes
      wait_timeout: 500
      exact_count: 1
      key_name: yevhen
      count_tag:
        Name: postgresql
      instance_tags:
        Name: postgresql
      user_data: "{{ lookup('template', 'userdata.txt.j2') }}"
    register: ec2_result
  - name: wait for WinRM to answer on all hosts
    wait_for:
      port: 5986
      host: "{{ item.public_ip }}"
      timeout: 600
    with_items: ec2_result.tagged_instances
  - name: add hosts to groups
    add_host:
      name: win-temp-{{ item.id }}
      ansible_ssh_host: "{{ item.public_ip }}"
      groups: win
    with_items: ec2_result.tagged_instances

- name: install postgres
  hosts: win
  vars: 
    win_initial_password: myTempPassword123!
    postgresql_pass: Ur@n!um824
    postgresql_user: postgres
  tasks:
  - name: install postgres
    win_chocolatey:
      name: postgresql-9.3
  - name: copy pg_hba
    win_copy: src=pg_hba.conf.j2 dest='C:\Program Files\PostgreSQL\9.3\data\pg_hba.conf'
  - name: restart PostreSQL
    win_service:
      name: PostgreSQL 
      state: restarted
  - name: Firewall rule to allow psql
    raw: netsh advfirewall firewall add rule profile=any name="Allow Postgresql" dir=in localport=5432 protocol=TCP action=allow
  - debug: msg="psql -h {{ ansible_ssh_host }} -p 5432 -U {{ postgresql_user }} -W"
  - debug: msg="Password - {{ postgresql_pass }} "
